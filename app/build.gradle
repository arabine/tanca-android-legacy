apply plugin: 'com.android.application'

ext.isRelease = { array ->
    array.each { name ->
        if (name.contains("Debug")) {
            return false
        }
    }
    return true
}

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.2'
    ndkVersion '21.4.7075529'
    defaultConfig {
        applicationId 'eu.d8s.Tanca'
        minSdkVersion 25
        targetSdkVersion 30
        versionCode 5
        versionName "1.0.2"

        externalNativeBuild {
            cmake {
                arguments '-DANDROID_PLATFORM=android-30',
                          '-DANDROID_TOOLCHAIN=clang',
                          '-DANDROID_STL=c++_shared'

                cppFlags "-fexceptions -frtti -std=c++14 -DUSE_UNIX_OS"


            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                          'proguard-rules.pro'
        }

        debug {
            debuggable true
        }

    }

    externalNativeBuild {
        cmake {
            version "3.18.1"
            path "src/main/cpp/CMakeLists.txt"
        }
    }


    splits {
        abi {
            enable isRelease(gradle.startParameter.taskNames)
            reset()
            include "x86_64", "x86", "arm64-v8a", "armeabi-v7a"
            universalApk true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.0-beta01'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
}
/*
task generateEfsSource(type:Exec) {
    println ">>>>>> Generate EFS file"

    workingDir '../'
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        println "Windows host detected"
        executable './gen_efs_android.bat'
    } else {
        println "Linux host detected"
        executable './gen_efs_android.sh'
    }

}
preBuild.dependsOn(generateEfsSource)

*/
